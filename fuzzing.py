import glob
import os
from pathlib import Path
import subprocess
import pprint
import itertools
import numpy as np
import matplotlib.pyplot as plt
import multiprocessing as mp


def fuzz():
    pool = mp.Pool(mp.cpu_count())
    dirs = {subDir:list(subDir.glob('**/*.txt')) for subDir in Path('asm').iterdir() if subDir.is_dir()}
    scoresDict = {subDir:[] for subDir in dirs.keys()}
    #calculate similarity scores of each family of malwares (by each subdirectory in asm folder)
    for subDir in dirs.keys():
        if 'benign' not in str(subDir):
            filePairs = list(itertools.combinations(dirs[subDir],2))
            #below 3 lines are for synchronous processing
            #for filePair in filePairs:
                #print('Processing file pair {} {}',filePair[0],filePair[1])
                #scoresDict[subDir].append(float(subprocess.check_output(["python3","analyze_fuzz.py","--fileA", filePair[0],"--fileB", filePair[1]]).strip().decode('utf-8')))
            print('Processing {}..'.format(subDir))
            result_objects=[pool.apply_async(parallelprocessinghelper,args=(filePair[0],filePair[1])) for filePair in filePairs]
            results = [r.get() for r in result_objects]
            scoresDict[subDir] = results
    pool.close()
    pool.join()
    plot(scoresDict)
               
    
def parallelprocessinghelper(fileA,fileB):
    #print('Processing file pair {} {}'.format(fileA,fileB))
    return float(subprocess.check_output(["python3","analyze_fuzz.py","--fileA", fileA,"--fileB", fileB]).strip().decode('utf-8'))

def plot(scoresDict):
    area = 10  # 0 to 15 point radii
    for score in scoresDict.values():
        print(score)
        x = score
        y = score
        plt.scatter(x, y, s=area, alpha=0.5)
    plt.show()

#plot()
fuzz()