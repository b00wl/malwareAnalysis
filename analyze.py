#!/usr/bin/env python
import argparse
import itertools
import sys

def parse_args():
    parser = argparse.ArgumentParser(description='Determine if file is malicious')
    parser.add_argument('--file', default='',
                        help="Pass file name within directory path")

    args = parser.parse_args()
    return args

def parse_opcodes(file):
    print("Parsing file: {}".format(file))

    try:
        with open("asm/{}".format(file)) as file:
            opcodes = [opcode.rstrip('\r\n') for opcode in file]
    except:
        print("No file found by that name!")
        print("Try including the path e.g. ./analyze.py --file benign/bunzip2.asm.txt")
        exit()
    return opcodes

def analyze_opcodes(opcodes):
    print("Analyzing opcodes")
    print('Building Opcode count Matrix..')#step 1
    try:
        opcode_count(opcodes)
        print("Successfully built the Opcode count Matrix")
    except:
        print('Unable to build opcode count Matrix',sys.exc_info())
        raise


#step1    
def opcode_count(opcodes):
    #the matrix dictionary consists of only the combinations that'll have a value. All other pairs are instructions will be 0
    matrix = {}

    #secondary iterator
    opCodeIter=iter(opcodes)
    next(opCodeIter)

    #primary iterator
    for opcode in opcodes:
        try:
            a = (opcode,next(opCodeIter))
            if a in matrix:
                matrix[a] += 1
            else:
                matrix.update({a:1})

        except StopIteration:
            break
    print(sorted(matrix.items()))
    


def main():
    args = parse_args()
    opcodes = parse_opcodes(args.file)
    print('Opcodes Read -> {}'.format(len(opcodes)))
    analyze_opcodes(opcodes)

main()