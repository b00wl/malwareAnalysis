#!/usr/bin/env python
"""This module analyzes malware families and determines
    if malware passes threshold"""

import argparse
from pathlib import Path
import subprocess
import itertools
import multiprocessing as mp
import matplotlib.pyplot as plt

SCORES_DICT = []

def parse_args():
    """Parse the argument files passed in

    Returns:
        args: The arguments args.dir, args.file, and args.knownFile
    """
    parser = argparse.ArgumentParser(description='Determine if file is malicious')
    parser.add_argument('--dir', default='',
                        help="Pass metamorphic directory within directory path")
    parser.add_argument('--file', default='',
                        help="Pass metamorphic file in the directory")
    parser.add_argument('--knownFile', default='',
                        help="Pass metamorphic file in the directory")

    arguments = parser.parse_args()
    return arguments

def calculate_metamorphic_scores(metamorphic_dir):
    """Calculate all the scores for malware families
    """
    global SCORES_DICT
    pool = mp.Pool(mp.cpu_count())
    dirs = {sub_dir:list(sub_dir.glob('**/*.txt')) for sub_dir in Path('asm').iterdir() \
     if sub_dir.is_dir()}
    SCORES_DICT = {sub_dir:[] for sub_dir in dirs.keys()}
    #calculate similarity scores of each family of malwares (by each subdirectory in asm folder)
    for sub_dir in dirs.keys():
        #if 'cridex' in str(sub_dir): - change this to dir testing for faster runs
        if metamorphic_dir in str(sub_dir):
            file_pairs = list(itertools.combinations(dirs[sub_dir], 2))
            print('Processing {}..'.format(sub_dir))
            result_objects = [pool.apply_async(parallelprocessinghelper, \
                args=(file_pair[0], file_pair[1])) for file_pair in file_pairs]
            results = [r.get() for r in result_objects]
            SCORES_DICT[sub_dir] = results
    pool.close()
    pool.join()
    #plot(SCORES_DICT)

def parallelprocessinghelper(file_a, file_b):
    """Parallelizes calling anaylze_fuzz.py

    Args:
        file_a (str): Path to fileA to call analyze_fuzz.py
        file_b (str): Path to fileB to call analyze_fuzz.py

     Returns:
         float: The Result from calling analyze_fuzz.py
                Could also be None.
    """
    # Not returning empty responses
    result = subprocess.check_output(["python3", "analyze_fuzz.py", "--fileA", file_a, \
     "--fileB", file_b]).strip().decode('utf-8')
    if result:
        return float(result)

    return None

def plot(metamorphic_dir, sequence):
    """Plots the metamorphic_dir against Benign files

    Args:
        metamorphic_dir (str): Directory of malware
        sequence (num): Sequence to plot
    """
    global SCORES_DICT
    malware_scores = SCORES_DICT[Path('asm/{}'.format(metamorphic_dir))]
    malware_scores = [x for x in malware_scores if x is not None]
    benign_scores = SCORES_DICT[Path('asm/{}'.format('benign'))]
    benign_scores = [x for x in benign_scores if x is not None]
    #Getting max number of files to determine the graph size
    #maxNumberOfFiles = max(len(malware_scores),len(benign_scores))
    #Creating a subplot with x as 4 and y as the max #of files in the two collections..
    #plt.ion()
    #plt.subplot(4, maxNumberOfFiles, sequence)
    area = 10  # 0 to 15 point radii
    colors = ['r', 'b']
    markers = ['o', '^']
    plt.scatter(range(len(malware_scores)), malware_scores, \
        c=colors[0], s=area, alpha=0.5, marker=markers[0], label=metamorphic_dir)
    plt.scatter(range(len(benign_scores)), benign_scores, \
        c=colors[1], s=area, alpha=0.5, marker=markers[1], label='Benign')
    plt.xlabel('Files', fontsize=10)
    plt.ylabel('Scores', fontsize=10)
    plt.legend(loc=2)
    plt.title('Scores Chart for {} vs {}'.format(metamorphic_dir, 'Benign'), fontsize=12)
    plt.plot()
    #plt.pause(0.001)

def calculate_benign_scores(metamorphic_dir):
    """Calculates Malware directory against benign directory

    Args:
        metamorphic_dir (str): Directory to run against benign
    """
    global SCORES_DICT
    pool = mp.Pool(mp.cpu_count())
    dirs = {sub_dir:list(sub_dir.glob('**/*.txt')) \
     for sub_dir in Path('asm').iterdir() if sub_dir.is_dir()}
    all_files = []
    benign_files = []
    malware_files = []
    for sub_dir in dirs.keys():
        if 'benign' in str(sub_dir):
            benign_files = dirs[sub_dir]
        elif metamorphic_dir in str(sub_dir):
            malware_files = dirs[sub_dir]

    for malware in malware_files:
        for benign in benign_files:
            all_files.append(list([malware, benign]))

    all_files = list(all_files)
    print('Processing {} with benign'.format(metamorphic_dir))
    result_objects = [pool.apply_async(parallelprocessinghelper, args=(all_file[0], all_file[1])) \
     for all_file in all_files]
    results = [r.get() for r in result_objects]
    SCORES_DICT[Path('asm/{}'.format('benign'))] = results
    pool.close()
    pool.join()
    #plot(SCORES_DICT)

def calculate_threshold(metamorphic_dir):
    """Calculates Malware directory against benign directory

    Args:
        metamorphic_dir (str): Directory to grab scores against benign
    """
    #global BENIGN_SCORES
    malware_scores = SCORES_DICT[Path('asm/{}'.format(metamorphic_dir))]
    malware_scores = [x for x in malware_scores if x is not None]
    #benign_scores = BENIGN_SCORES
    benign_scores = SCORES_DICT[Path('asm/{}'.format('benign'))]
    benign_scores = [x for x in benign_scores if x is not None]
    #print(f"malware scores {malware_scores}\n")
    #print(f"benign scores {benign_scores}")
    threshold = 0.0
    if malware_scores and sum(malware_scores) > 0 \
     and benign_scores and sum(benign_scores) > 0:
        malware_threshold = sum(malware_scores)/len(malware_scores)
        benign_threshold = sum(benign_scores)/len(benign_scores)
        threshold = (malware_threshold + benign_threshold) / 2
        print(f"Threshold Calculation is {threshold}")

    return threshold

def classify_file(threshold, malware_file, comparison_file):
    """Determines if malware_file is malicious against comparison_file

    Args:
        threshold (float): Value of threshold
        malware_file (str): Malware file to run comparison against
        malware_dir (str): Malware directory containing files
        comparison_file (str): Known Malware to compare file against
    """
    result = subprocess.check_output(["python3", "analyze_fuzz.py", "--fileA", malware_file, \
        "--fileB", comparison_file]).strip().decode('utf-8')
    if not result:
        print(f"Unable to process {malware_file} against {comparison_file}")
    else:
        print(f"Result is {float(result)}")
        if float(result) >= threshold:
            print(f"Result is higher than threshold! Malware possibly found in file {malware_file}!")
        else:
            print(f"{malware_file} seems safe!")

ARGS = parse_args()
calculate_metamorphic_scores(ARGS.dir)
if ARGS.file and not ARGS.dir:
    print("Must provide file within dir!")
if ARGS.dir:
    calculate_benign_scores(ARGS.dir)
    plot(ARGS.dir, 1)
    THRESHOLD_VALUE = calculate_threshold(ARGS.dir)
    if ARGS.file and ARGS.knownFile and THRESHOLD_VALUE > 0.0:
        classify_file(THRESHOLD_VALUE, ARGS.file, ARGS.knownFile)
    elif THRESHOLD_VALUE <= 0.0:
        print("Unable to calculate threshold!")
    else:
        print("Did you include all arguments?")
        print("i.e. python3 detection.py --dir smarthdd --file \
            asm/smarthdd/0314ca7f19c2842d8c95594f545a5432aa850191.asm.txt \
            --knownFile asm/smarthdd/f2b477f26017c8d041278cb38d30db7b44440549.asm.txt")
    plt.show()

