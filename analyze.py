#!/usr/bin/env python
import argparse
import itertools

def parse_args():
    parser = argparse.ArgumentParser(description='Determine if file is malicious')
    parser.add_argument('--file', default='',
                        help="Pass file name within directory path")

    args = parser.parse_args()
    return args

def parse_opcodes(file):
    print("Parsing file: {}".format(file))

    try:
        with open("asm/{}".format(file)) as file:
            opcodes = [opcode.rstrip('\r\n') for opcode in file]
    except:
        print("No file found by that name!")
        print("Try including the path e.g. ./analyze.py --file benign/bunzip2.asm.txt")
        exit()
    return opcodes

def analyze_opcodes(opcodes):
    print("Analyzing opcodes")
    print('Building Opcode count Matrix..')
    try:
        opcode_count(opcodes)
        print("Successfully built the Opcode count Matrix")
    except:
        print('Unable to build opcode count Matrix')
        exit()
    
def opcode_count(opcodes):
    #Extract unique Opcodes to build the matrix
    uniqueOpCodes = sorted({opcode for opcode in opcodes})
    print("Extracting Unique Opcodes -> {}".format(len(uniqueOpCodes)))
    #wheneven we see ADD, get the previous element and add it to another list
    #create a dictionary with the key [opcode,opcode]. If the key is already in the dict, increment the count. Otherwise add it.    
    #idea 1 -> creating tuples for keys and preloading a dictionary with all possible tuples from the sorted unique opcode
    opCodeCountDict = {x:0 for x in itertools.product(uniqueOpCodes,repeat=2)}
    #print('All Possible Matrix combinations->',opCodeCountDict,len(opCodeCountDict))



def main():
    args = parse_args()
    opcodes = parse_opcodes(args.file)
    print('Opcodes Read -> {}'.format(len(opcodes)))
    analyze_opcodes(opcodes)

main()